{"version":3,"sources":["components/stylebar.js","components/zoombuttons.js","App.js","serviceWorker.js","index.js"],"names":["StyleBar","props","Object","entries","styles","map","key","value","type","id","name","checked","currentStyle","onChange","handleStylechange","htmlFor","ZoomButtons","onClick","handleZoomChange","className","mapboxgl","accessToken","App","event","change","target","console","log","setState","state","zoom","parseInt","renderMapCorrectly","style","lng","lat","Map","container","this","mapContainer","center","on","getCenter","toFixed","getZoom","addControl","NavigationControl","setStyle","Streets","Outdoors","Light","Dark","Satellite","SatStreets","NavPreviewDay","NavPreviewNight","NavGuidanceDay","NavGuidanceNight","ref","el","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wSAoBeA,MAjBf,SAAkBC,GACjB,OACC,6BACEC,OAAOC,QAAQF,EAAMG,QAAQC,KAAI,YAAmB,IAAD,mBAAhBC,EAAgB,KAAXC,EAAW,KACnD,OACC,6BACC,2BAAOD,IAAG,UAAKA,EAAL,UAAkBE,KAAK,QAAQC,GAAIH,EAAKI,KAAMJ,EAAKC,MAAOA,EAAOI,QAASJ,IAAUN,EAAMW,aAAcC,SAAUZ,EAAMa,oBAClI,2BAAOR,IAAG,UAAKA,EAAL,UAAkBS,QAAST,GAAMA,SCIlCU,MAXf,SAAqBf,GACpB,OACC,6BACC,4BAAQgB,QAAShB,EAAMiB,iBAAkBV,KAAK,SAASF,IAAI,SAASG,GAAG,SAASU,UAAU,qBAA1F,WACA,4BAAQF,QAAShB,EAAMiB,iBAAkBV,KAAK,SAASF,IAAI,UAAUG,GAAG,UAAUU,UAAU,qBAA5F,c,gBCFHC,IAASC,YAAc,6F,IAwFRC,E,YAjFb,WAAYrB,GAAQ,IAAD,8BACjB,4CAAMA,KAiCRiB,iBAAmB,SAACK,GAClB,IAAIC,EAA6B,WAApBD,EAAME,OAAOhB,GAAkB,GAAK,EACjDiB,QAAQC,IAAIH,GAEZ,EAAKI,UAAS,SAAAC,GAAK,MAAK,CACtBC,KAAMD,EAAMC,KAAOC,SAASP,OAC1B,WACF,EAAKQ,yBAzCU,EA8CnBlB,kBAAoB,SAACS,GACnB,EAAKK,SAAS,CACZK,MAAOV,EAAME,OAAOlB,QACnB,WACD,EAAKyB,yBAhDP,EAAKH,MAAQ,CACXK,IAAK,EACLC,IAAK,GACLL,KAAM,EACNG,MAAO,eANQ,E,kFAUG,IAAD,OACb5B,EAAM,IAAIe,IAASgB,IAAI,CAC3BC,UAAWC,KAAKC,aAChBN,MAAM,0BAAD,OAA4BK,KAAKT,MAAMI,OAC5CO,OAAQ,CAACF,KAAKT,MAAMK,IAAKI,KAAKT,MAAMM,KACpCL,KAAMQ,KAAKT,MAAMC,OAGnBzB,EAAIoC,GAAG,QAAQ,WACb,EAAKb,SAAS,CACZM,IAAK7B,EAAIqC,YAAYR,IAAIS,QAAQ,GACjCR,IAAK9B,EAAIqC,YAAYP,IAAIQ,QAAQ,GACjCb,KAAMzB,EAAIuC,UAAUD,QAAQ,QAIhCtC,EAAIwC,WAAW,IAAIzB,IAAS0B,mBAC5BzC,EAAI0C,SAAJ,iCAAuCT,KAAKT,MAAMI,U,0CAIlDK,KAAKN,uB,+BAuBE,IAAD,OAcN,OACE,6BACE,yBAAKb,UAAU,gBACb,yBAAKA,UAAU,gBAAf,cAA0CmB,KAAKT,MAAMK,IAArD,gBAAuEI,KAAKT,MAAMM,IAAlF,YAAgGG,KAAKT,MAAMC,MAC3G,kBAAC,EAAD,CAAU1B,OAjBK,CACnB4C,QAAS,cACTC,SAAU,eACVC,MAAO,YACPC,KAAM,WACNC,UAAW,eACXC,WAAY,wBACZC,cAAe,4BACfC,gBAAiB,8BACjBC,eAAgB,6BAChBC,iBAAkB,gCAOkBtC,UAAU,WAAWP,aAAgB0B,KAAKT,MAAMI,MAAOnB,kBAAmBwB,KAAKxB,oBAC/G,kBAAC,EAAD,CAAaI,iBAAkBoB,KAAKpB,oBAEtC,yBAAKwC,IAAK,SAAAC,GAAE,OAAI,EAAKpB,aAAeoB,GAAIxC,UAAU,sB,GA9ExCyC,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpD,QAAQoD,MAAMA,EAAMC,c","file":"static/js/main.8109ec1c.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction StyleBar(props){\n\treturn (\n\t\t<div>\n\t\t\t{Object.entries(props.styles).map(([key, value]) => {\n\t\t\t\treturn(\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input key={`${key}_input`} type=\"radio\" id={key} name={key} value={value} checked={value === props.currentStyle} onChange={props.handleStylechange}/>\n\t\t\t\t\t\t<label key={`${key}_label`} htmlFor={key}>{key}</label>\n\t\t\t\t\t</div>\n\t\t\t\t)\n  \t\t\t})}\n\n\t\t</div>\n\t)\n}\t\n\n\nexport default StyleBar;\n","import React from 'react';\n\n\nfunction ZoomButtons(props){\n\treturn (\n\t\t<div>\n\t\t\t<button onClick={props.handleZoomChange} type=\"button\" key=\"zoomin\" id=\"zoomin\" className=\"btn btn-secondary\">Zoom in</button>\n\t\t\t<button onClick={props.handleZoomChange} type=\"button\" key=\"zoomout\" id=\"zoomout\" className=\"btn btn-secondary\">Zoom out</button>\n\t\t</div>\n\n\t)\n}\t\n\n\nexport default ZoomButtons;\n","import React from 'react';\nimport './App.css';\nimport StyleBar from './components/stylebar'\nimport ZoomButtons from './components/zoombuttons'\nimport mapboxgl from 'mapbox-gl';\nmapboxgl.accessToken = 'pk.eyJ1IjoiamFrZXNpbmciLCJhIjoiY2s3dGNzeWdwMHlkeDNmbHV5M3htZHhsdCJ9.wHSNBWGNxPkJ8bhoX4XTmQ'; \n\n\n\nclass App extends React.Component {\n  \n\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: 5,\n      lat: 34,\n      zoom: 3,\n      style: 'streets-v11'\n    };\n  }\n\n  renderMapCorrectly() {\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: `mapbox://styles/mapbox/${this.state.style}`,\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom\n    })\n\n    map.on('move', () => {\n      this.setState({\n        lng: map.getCenter().lng.toFixed(4),\n        lat: map.getCenter().lat.toFixed(4),\n        zoom: map.getZoom().toFixed(2)\n      })\n    })\n\n    map.addControl(new mapboxgl.NavigationControl());\n    map.setStyle(`mapbox://styles/mapbox/${this.state.style}`)\n  }\n\n  componentDidMount() {\n    this.renderMapCorrectly();\n  }\n\n  handleZoomChange = (event) => {\n    let change = event.target.id === 'zoomin' ? 1 : -1;\n    console.log(change)\n\n    this.setState(state => ({\n      zoom: state.zoom + parseInt(change)\n    }), () => {\n      this.renderMapCorrectly();\n    });\n    \n  }\n\n  handleStylechange = (event) => {\n    this.setState({\n      style: event.target.value\n    }, () => {\n      this.renderMapCorrectly();\n    })\n  }\n\n  render(){\n    const styleOptions = {\n      Streets: 'streets-v11',\n      Outdoors: 'outdoors-v11',\n      Light: 'light-v10',\n      Dark: 'dark-v10',\n      Satellite: 'satellite-v9',\n      SatStreets: 'satellite-streets-v11',\n      NavPreviewDay: 'navigation-preview-day-v4',\n      NavPreviewNight: 'navigation-preview-night-v4',\n      NavGuidanceDay: 'navigation-guidance-day-v4',\n      NavGuidanceNight: 'navigation-guidance-night-v4',\n    }\n\n    return(\n      <div>\n        <div className=\"barContainer\">\n          <div className=\"sidebarStyle\">Longitude: {this.state.lng} | Latitude: {this.state.lat} | Zoom: {this.state.zoom}</div>\n          <StyleBar styles={styleOptions} className=\"styleBar\" currentStyle = {this.state.style} handleStylechange={this.handleStylechange}/>\n          <ZoomButtons handleZoomChange={this.handleZoomChange}/>\n        </div>\n        <div ref={el => this.mapContainer = el} className=\"mapContainer\"/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}