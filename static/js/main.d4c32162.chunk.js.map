{"version":3,"sources":["components/stylebar.js","components/zoombuttons.js","App.js","serviceWorker.js","index.js"],"names":["StyleBar","props","className","Object","entries","styles","map","key","value","type","id","name","checked","currentStyle","onChange","handleStylechange","htmlFor","ZoomButtons","onClick","handleZoomChange","zoomError","mapboxgl","accessToken","App","event","checkForZoomError","target","state","zoomIn","duration","animate","setState","zoom","getZoom","zoomOut","style","setStyle","lng","lat","minZoom","maxZoom","Map","container","this","mapContainer","center","on","getCenter","toFixed","ref","el","Streets","Outdoors","Light","Dark","Satellite","JakeCustom","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d4c32162.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction StyleBar(props){\n\treturn (\n\t\t<div className=\"styleBar\">\n\t\t\t{Object.entries(props.styles).map(([key, value]) => {\n\t\t\t\treturn(\n\t\t\t\t\t<div className=\"custom-control custom-radio\">\n\t\t\t\t\t\t<input className=\"custom-control-input\" key={`${key}`} type=\"radio\" id={key} name={key} value={value} checked={value === props.currentStyle} onChange={props.handleStylechange}/>\n\t\t\t\t\t\t<label className=\"custom-control-label\" key={`${value}`} htmlFor={key}>{key}</label>\n\t\t\t\t\t</div>\n\t\t\t\t)\n  \t\t\t})}\n\t\t</div>\n\t)\n}\t\n\n\nexport default StyleBar;\n\n","import React from 'react';\n\n\nfunction ZoomButtons(props){\n\treturn (\n\t\t<div className=\"zoomButtons\"> {/*adding flex styling to put error below buttons*/}\n\t\t\t<div className=\"btn-group\">\n\t\t\t\t<button onClick={props.handleZoomChange} type=\"button\" key=\"zoomin\" id=\"zoomin\" className=\"btn btn-secondary\">Zoom in</button>\n\t\t\t\t<button onClick={props.handleZoomChange} type=\"button\" key=\"zoomout\" id=\"zoomout\" className=\"btn btn-secondary\">Zoom out</button>\n\t\t\t</div>\n\t\t\t{props.zoomError ? <p className=\"alert alert-primary\">{props.zoomError}</p> : ''}\n\t\t</div>\n\t)\n}\t\n\n\nexport default ZoomButtons;\n","import React from 'react';\nimport './App.css';\nimport StyleBar from './components/stylebar'\nimport ZoomButtons from './components/zoombuttons'\nimport mapboxgl from 'mapbox-gl';\n\nmapboxgl.accessToken = 'pk.eyJ1IjoiamFrZXNpbmciLCJhIjoiY2s4NG9sbGxxMDA3aDNmbXc1bWcyaW4yaiJ9.gvoKtstAfK6qvIwNFVdwXg';\n\n//secret key: sk.eyJ1IjoiamFrZXNpbmciLCJhIjoiY2s4NG96NWhhMDBjOTNwbW9seW5tazMwaCJ9.rT0PuYeb3XsYH3MialLNeQ \n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: -122.3642,\n      lat: 47.6100,\n      zoom: 11,\n      style: 'mapbox/streets-v11',\n      minZoom: 10.0,\n      maxZoom: 15.5,\n      map: {},\n      zoomError: null\n    };\n  }\n  \n  componentDidMount() {\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: `mapbox://styles/${this.state.style}`,\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom,\n      minZoom: this.state.minZoom,\n      maxZoom: this.state.maxZoom\n    });\n\n    map.on('move', () => {\n      this.setState({\n        lng: map.getCenter().lng.toFixed(4),\n        lat: map.getCenter().lat.toFixed(4),\n        zoom: map.getZoom().toFixed(1)\n      })\n    })\n\n    map.setStyle(`mapbox://styles/${this.state.style}`);\n    this.setState({map: map});\n  }\n\n  checkForZoomError(event) {\n    if(this.state.zoom==this.state.minZoom && event==='zoomout'){\n      this.setState({\n        zoomError: 'Min zoom reached'\n      })\n    } else if (this.state.zoom==this.state.maxZoom && event==='zoomin'){\n      this.setState({\n        zoomError: 'Max zoom reached'\n      })\n    } else {\n      this.setState({\n        zoomError: null\n      })\n    }\n  }\n\n  handleZoomChange = (event) => {\n    this.checkForZoomError(event.target.id)\n\n    if(event.target.id==='zoomin'){\n      this.state.map.zoomIn({duration:1000, animate: true}, () => {\n        this.setState({\n          zoom: this.state.map.getZoom()\n        })\n      });\n    } else {\n      this.state.map.zoomOut({duration:1000, animate: true}, () => {\n        this.setState({\n          zoom: this.state.map.getZoom()\n        })\n      });\n    }\n\n  }\n\n  handleStylechange = (event) => {\n    this.setState({\n        style: event.target.value\n      })\n\n    this.state.map.setStyle(`mapbox://styles/${event.target.value}`)\n  }\n\n  render(){\n    const styleOptions = {\n      Streets: 'mapbox/streets-v11',\n      Outdoors: 'mapbox/outdoors-v11',\n      Light: 'mapbox/light-v10',\n      Dark: 'mapbox/dark-v10',\n      Satellite: 'mapbox/satellite-v9',\n      JakeCustom: 'jakesing/ck7uu3usi2hym1imt1ml0h71r'\n    }\n\n    return(\n      <div className=\"container\">\n        <div className=\"lead\">Longitude: {this.state.lng} | Latitude: {this.state.lat} | Zoom: {this.state.zoom}</div>\n        <div className=\"map_labels\">\n          <div ref={el => this.mapContainer = el} className=\"mapContainer\"/>\n          <StyleBar styles={styleOptions} currentStyle = {this.state.style} handleStylechange={this.handleStylechange}/>\n        </div>\n        <ZoomButtons handleZoomChange={this.handleZoomChange} zoomError={this.state.zoomError}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}