{"version":3,"sources":["components/stylebar.js","components/zoombuttons.js","App.js","serviceWorker.js","index.js"],"names":["StyleBar","props","Object","entries","styles","map","key","value","type","id","name","checked","currentStyle","onChange","handleStylechange","htmlFor","ZoomButtons","onClick","handleZoomChange","className","currentZoom","minZoom","maxZoom","mapboxgl","accessToken","App","mapRef","React","createRef","event","state","zoom","target","console","log","change","setState","Math","round","parseInt","renderMapCorrectly","changeZoom","style","lng","lat","Map","container","this","mapContainer","center","on","getCenter","toFixed","getZoom","setStyle","Streets","Outdoors","Light","Dark","Satellite","SatStreets","NavPreviewDay","NavPreviewNight","NavGuidanceDay","NavGuidanceNight","Jake","ref","el","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.53d4bc0a.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction StyleBar(props){\n\treturn (\n\t\t<div>\n\t\t\t{Object.entries(props.styles).map(([key, value]) => {\n\t\t\t\treturn(\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input key={`${key}`} type=\"radio\" id={key} name={key} value={value} checked={value === props.currentStyle} onChange={props.handleStylechange}/>\n\t\t\t\t\t\t<label key={`${value}`} htmlFor={key}>{key}</label>\n\t\t\t\t\t</div>\n\t\t\t\t)\n  \t\t\t})}\n\t\t</div>\n\t)\n}\t\n\n\nexport default StyleBar;\n","import React from 'react';\n\n\nfunction ZoomButtons(props){\n\treturn (\n\t\t<div>\n\t\t\t<button onClick={props.handleZoomChange} type=\"button\" key=\"zoomin\" id=\"zoomin\" className=\"btn btn-secondary\">Zoom in</button>\n\t\t\t<button onClick={props.handleZoomChange} type=\"button\" key=\"zoomout\" id=\"zoomout\" className=\"btn btn-secondary\">Zoom out</button>\n\t\t\t{props.currentZoom === props.minZoom ? <p>Min zoom reached</p> : \n\t\t\t\t\tprops.currentZoom === props.maxZoom ? <p>Max zoom reached</p> : ''}\n\t\t</div>\n\t)\n}\t\n\n\nexport default ZoomButtons;\n","import React from 'react';\nimport './App.css';\nimport StyleBar from './components/stylebar'\nimport ZoomButtons from './components/zoombuttons'\nimport mapboxgl from 'mapbox-gl';\n\nmapboxgl.accessToken = 'pk.eyJ1IjoiamFrZXNpbmciLCJhIjoiY2s3dGNzeWdwMHlkeDNmbHV5M3htZHhsdCJ9.wHSNBWGNxPkJ8bhoX4XTmQ'; \n\n\n\nclass App extends React.Component {\n  mapRef = React.createRef();\n  map;\n\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: -122.4783,\n      lat: 37.8617,\n      zoom: 8,\n      style: 'streets-v11',\n      minZoom: 2,\n      maxZoom: 12\n    };\n  }\n\n  renderMapCorrectly() {\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: `mapbox://styles/mapbox/${this.state.style}`,\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom,\n      minZoom: this.state.minZoom,\n      maxZoom: this.state.maxZoom\n    })\n\n    map.on('move', () => {\n      this.setState({\n        lng: map.getCenter().lng.toFixed(4),\n        lat: map.getCenter().lat.toFixed(4),\n        zoom: map.getZoom().toFixed(2)\n      })\n    })\n\n    map.setStyle(`mapbox://styles/${this.state.style}`);\n  }\n\n  componentDidMount() {\n    this.renderMapCorrectly();\n  }\n\n  handleZoomChange = (event) => {\n    const changeZoom = () => {\n      let change = event.target.id === 'zoomin' ? 1 : -1;\n      this.setState(state => ({\n        zoom: Math.round(state.zoom + parseInt(change))\n      }), () => {\n        this.renderMapCorrectly();\n      })\n    }\n\n    if(this.state.zoom === this.state.minZoom && event.target.id==='zoomout'){\n      console.log(`Cannot Zoom out further`)\n    } else if (this.state.zoom === this.state.maxZoom && event.target.id==='zoomin'){\n      console.log(`Cannot Zoom in further`)\n    } else {\n      changeZoom();\n    }\n  }\n\n  handleStylechange = (event) => {\n    this.setState({\n      style: event.target.value\n    }, () => {\n      this.renderMapCorrectly();\n    })\n  }\n\n  render(){\n    const styleOptions = {\n      Streets: 'mapbox/streets-v11',\n      Outdoors: 'mapbox/outdoors-v11',\n      Light: 'mapbox/light-v10',\n      Dark: 'mapbox/dark-v10',\n      Satellite: 'mapbox/satellite-v9',\n      SatStreets: 'mapbox/satellite-streets-v11',\n      NavPreviewDay: 'mapbox/navigation-preview-day-v4',\n      NavPreviewNight: 'mapbox/navigation-preview-night-v4',\n      NavGuidanceDay: 'mapbox/navigation-guidance-day-v4',\n      NavGuidanceNight: 'mapbox/navigation-guidance-night-v4',\n      Jake: 'jakesing/ck7ute9na2h4k1in8xny4dtge/draft'\n    }\n\n    return(\n      <div>\n        <div className=\"barContainer\">\n          <div className=\"sidebarStyle\">Longitude: {this.state.lng} | Latitude: {this.state.lat} | Zoom: {this.state.zoom}</div>\n          <StyleBar styles={styleOptions} className=\"styleBar\" currentStyle = {this.state.style} handleStylechange={this.handleStylechange}/>\n          <ZoomButtons handleZoomChange={this.handleZoomChange} currentZoom={this.state.zoom} maxZoom={this.state.maxZoom} minZoom={this.state.minZoom}/>\n        </div>\n        <div ref={el => this.mapContainer = el} className=\"mapContainer\"/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}